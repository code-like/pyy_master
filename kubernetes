第二节 容器的介绍
[前情]
操作系统如何管理进程？进程有何特点？这些特点带来什么问题？如何为进程提供独立运行环境？
进程包括系统自带的服务和用户的应用。
第一，这些进程可以相互看到、相互通信；>> 高级权限的进程可以攻击其他进程
第二，它们使用的是同一个文件系统，可以对同一个文件进行读写操作；>>具有高级权限的进程可能会将其他进程的数据删除掉，破坏掉其他进程的正常运行;
                                                            进程与进程之间的依赖可能会存在冲突
第三，这些进程会使用相同的系统资源。>>可能会存在资源抢占的问题，当一个应用需要消耗大量 CPU 和内存资源的时候，就可能会破坏其他应用的正常运行
针对不同进程使用同一个文件系统 >>> linux&unix 操作系统通过chroot达到视图隔离，进程具备独立文件系统
namespaces 实现进程在资源视图上的隔离
cgroups 限制资源使用率，限制CPU使用和内存量

什么是容器？
容器就是一个视图隔离，资源可限制，独立的文件系统的进程集合。不需要具备内核相关的代码和工具，只需二进制文件，配置文件和依赖。

什么是镜像？如何构建？
容器运行时所需要的所有的文件集合称之为容器镜像。采用dockerfile 构建镜像。构建过程中文件系统的变化称为changeset。

changeset的分层和复用带来什么优势？
提高分发效率 > 镜像拆分可并行下载数据
本地以有存储的数据不做覆盖，只需下载本地没有的数据
镜像数据共享，节省了磁盘空间。这就是复用的能力。

实例：dockerfile 创建：构建 golang 应用
from golang:1.12-alpine #基于该版本镜像
workdir /go/src/app #创建文件路径
copy . . #复制本地文件到/go/src/app，将宿主机上的文件拷贝到容器镜像内
run go get -d -v #获取独立系统
run go install -v #创建安装应用
cmd <"app"> #运行应用程序
创建完成dockerfile , 则可通过 docker build 构建应用。
推到镜像仓库：docker push

如何运行容器？
从镜像仓库下载镜像
docker images 查看本地镜像
docker run 运行镜像。可多次运行得到多个容器。一个镜像就是一个模板，一个容器就是一个运行实例，因此镜像就具有了一次构建、到处运行的特点。















